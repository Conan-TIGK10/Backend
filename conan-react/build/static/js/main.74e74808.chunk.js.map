{"version":3,"sources":["Components/Content/Content.js","Components/Canvas/Drawables/Surface.js","Components/Canvas/Drawables/Path.js","Components/Canvas/Canvas.js","DummySessions.js","App.js","serviceWorker.js","index.js"],"names":["Content","props","className","children","Surface","draw","ctx","fillStyle","color","fillRect","width","height","setWidth","newWidth","setHeight","newHeight","getCenter","_","x","Math","floor","y","isInside","top","left","right","bottom","topIsInside","leftIsInside","bottomIsInside","rightIsInside","this","scale","Path","time","strokeStyle","outOfBounds","lineWidth","beginPath","moveTo","startX","startY","i","positions","length","t","toX","toY","timeBetweenPoints","timeQuota","quotaX","quotaY","halfSide","surface","lineTo","stroke","setStart","setSurface","collisionColor","Canvas","path","session","rootRef","React","useRef","canvasRef","requestRef","animationIsRunning","animationTimeRef","start","elapsed","useEffect","canvas","current","getContext","size","calculateCanvasSize","cancelAnimationFrame","rootWidth","offsetWidth","rootHeight","offsetHeight","animate","calculateTime","requestAnimationFrame","timeInMs","ref","onClick","e","dummySessions","id","name","collison","App","useState","sessions","isFetching","navbarIsOpen","dropDownIsOpen","state","setState","setTimeout","toggleNavbar","toggleDropdown","Navbar","dark","expand","NavbarBrand","NavbarToggler","Nav","navbar","Dropdown","disabled","nav","isOpen","toggle","DropdownToggle","caret","DropdownMenu","map","index","DropdownItem","key","type","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.74e74808.chunk.js","sourcesContent":["import React from 'react'\nimport './Content.css'\n\nconst Content = props => {\n    return (\n        <div className={\"ContentRoot\"}>\n            {props.children}\n        </div>\n    )\n}\n\nexport default Content","class Surface {\n    constructor(props) {\n        this.width = props.width ? props.width: 0\n        this.height = props.height ? props.height : 0\n        this.scale = props.scale ? props.scale : 1\n        this.color = props.color ? props.color : \"black\"\n    }\n    \n    draw = ctx => {\n        ctx.fillStyle = this.color\n        ctx.fillRect(0,0, this.width, this.height)\n    }\n\n    setWidth = newWidth => {\n        this.width = newWidth\n    }\n\n    setHeight = newHeight => {\n        this.height = newHeight\n    }\n\n    getCenter = _ => {\n        return {\n            x: Math.floor(this.width / 2),\n            y: Math.floor(this.height / 2)\n        }\n    }\n\n    isInside = (top, left, right, bottom) => {\n        const topIsInside = top >= 0\n        const leftIsInside = left >= 0\n        const bottomIsInside = bottom <= this.height\n        const rightIsInside = right <= this.width\n\n        return (topIsInside && leftIsInside && bottomIsInside && rightIsInside)\n    }\n}\n\nexport default Surface","class Path {\n    constructor(props) {\n        this.scale = props.scale ? props.scale : 1\n        this.color = props.color ? props.color : 'black'\n        this.collisionColor = props.collisionColor ? props.collisionColor : 'red'\n        this.startX = props.startX ? props.startX: 0\n        this.startY = props.startY ? props.startY: 0\n        this.positions = props.positions\n    }\n\n\n    draw = (ctx, time) => {\n        ctx.strokeStyle = this.color\n\n        let outOfBounds = false\n        ctx.lineWidth = this.scale / 2\n        ctx.beginPath()\n        ctx.moveTo(this.startX, this.startY)\n        \n        for(let i=0; i<this.positions.length-1; i++) {\n            if(this.positions[i].t > time){\n                break;\n            }\n\n            let toX = this.startX \n            let toY = this.startY\n\n            // MAKE IT BUTTER SMOOTH\n            if(this.positions[i+1].t > time){\n                let timeBetweenPoints = this.positions[i+1].t-this.positions[i].t\n                let timeElapsedBetweenPoints = time - this.positions[i].t\n                let timeQuota = timeElapsedBetweenPoints / timeBetweenPoints\n\n                let deltaX = this.positions[i+1].x - this.positions[i].x\n                let deltaY = this.positions[i+1].y - this.positions[i].y\n\n                let quotaX = deltaX * timeQuota\n                let quotaY = deltaY * timeQuota\n\n                toX += (this.positions[i].x + quotaX) * this.scale\n                toY += (this.positions[i].y + quotaY) * this.scale\n            } else {\n                toX += this.positions[i+1].x*this.scale\n                toY += this.positions[i+1].y*this.scale\n            }   \n              \n            // TRACK IF INSIDE\n            const halfSide = this.scale <= 1 ? 0: Math.floor(this.scale/2)\n            const left = toX - halfSide\n            const top = toY - halfSide\n            const right = toX + halfSide\n            const bottom = toY + halfSide\n\n            if(!this.surface.isInside(top, left, right, bottom)) {\n                this.scale = Math.floor(this.scale - this.scale/4)\n                outOfBounds = true\n                break\n            }\n\n            // DRAW\n            ctx.lineTo(toX, toY)\n            ctx.stroke()\n        }\n\n        // ACT IF OUTSIDE CANVAS\n        if(outOfBounds){\n            this.surface.draw(ctx)\n            this.draw(ctx, time)\n        }\n    }\n\n    setStart = (x, y) => {\n        this.startX = x\n        this.startY = y\n    }\n\n    setSurface = surface => {\n        this.surface = surface\n    }\n}\n\nexport default Path","import React from 'react'\nimport Surface from './Drawables/Surface'\nimport './Canvas.css'\nimport Path from './Drawables/Path'\n\nconst Canvas = props => {\n\n    const surface = new Surface({\n        color: '#343A40'\n    })\n\n    const path = new Path({\n        color: 'white',\n        scale: 100,\n        positions: props.session\n    })\n\n    const rootRef = React.useRef(null)\n    const canvasRef = React.useRef(null)\n    const ctx = React.useRef(null)\n    const requestRef = React.useRef(null)\n    const animationIsRunning = React.useRef(false)\n    const animationTimeRef = React.useRef({\n        start: null,\n        elapsed: null\n    })\n\n    React.useEffect(() => {\n        const canvas = canvasRef.current\n        ctx.current = canvas.getContext('2d')\n        const size = calculateCanvasSize()\n        ctx.current.canvas.width = size\n        ctx.current.canvas.height = size\n        surface.setWidth(size)\n        surface.setHeight(size)\n        path.setStart(surface.getCenter().x, surface.getCenter().y)\n        path.setSurface(surface)\n        surface.draw(ctx.current)\n        return () => cancelAnimationFrame(requestRef.current)\n    }, [])\n\n    const calculateCanvasSize = _ => {\n        const rootWidth = rootRef.current.offsetWidth\n        const rootHeight = rootRef.current.offsetHeight\n        const size = rootWidth < rootHeight ? rootWidth : rootHeight\n        const oddSize = size % 2 == 0 ? size - 23 : size - 24\n\n        return oddSize\n    }\n\n    const toggleAnimation = e => {\n        if (animationIsRunning.current) {\n            animationTimeRef.current = {\n                start: null,\n                elapsed: null\n            }\n            surface.draw(ctx.current)\n            cancelAnimationFrame(requestRef.current)\n        } else {\n            requestAnimationFrame(animate)\n        }\n        animationIsRunning.current = !animationIsRunning.current\n    }\n\n    const animate = time => {\n        calculateTime(time)\n        surface.draw(ctx.current)\n        path.draw(ctx.current, animationTimeRef.current.elapsed)\n        requestRef.current = requestAnimationFrame(animate)\n    }\n\n    const calculateTime = timeInMs => {\n        if(animationTimeRef.current.start === null) {\n            animationTimeRef.current.start = timeInMs\n            animationTimeRef.current.elapsed = 0\n        } else {\n            animationTimeRef.current.elapsed = timeInMs - animationTimeRef.current.start\n        }\n    }\n\n    return (\n        <div ref={rootRef} className=\"CanvasRoot\">\n            <canvas\n                className=\"Canvas\"\n                ref={canvasRef}\n                onClick={toggleAnimation}\n            />\n        </div>\n    )\n}\n\nexport default Canvas","const dummySessions = [\n    {\n        id: 1,\n        name: \"Åka Bot\",\n        positions: [\n            {x: 0, y: 0, t:0},\n            {x: 1, y:1, t:1000},\n            {x: 2, y:1, t:2000},\n            {x: 3, y: 2, t:3000, collison: true},\n            {x:3, y: 3, t:4000},\n            {x:3, y: 4, t:5000},\n            {x: 4, y: 4, t:6000},\n            {x: 5, y: 4, t:7000},\n            {x: 6, y: 4, t:8000, collison: true},\n            {x: 6, y: 5, t:9000},\n            {x: 6, y: 6, t:10000},\n            {x: 6, y: 7, t:11000},\n            {x: 6, y: 8, t:12000},\n            {x: 5, y: 9, t:13000},\n            {x: 4, y: 9, t:14000},\n            {x: 3, y: 9, t:15000},\n            {x: 2, y: 9, t:16000},\n            {x: 1, y: 9, t:17000},\n            {x: 0, y: 9, t:18000},\n            {x: -1, y: 9, t:19000, collison: true},\n            {x: -1, y: 8, t:20000},\n            {x: -1, y: 7, t:21000},\n            {x: -1, y: 6, t:22000},\n            {x: -1, y: 5, t:23000},\n            {x: -1, y: 4, t:24000},\n            {x: -1, y: 3, t:25000},\n            {x: -2, y: 2, t:26000},\n            {x: -3, y: 1, t:27000},\n            {x: -4, y: 1, t:28000},\n            {x: -5, y: 1, t:29000},\n        ]\n    }\n]\n\nexport default dummySessions","import React from 'react';\nimport Content from './Components/Content/Content'\nimport Canvas from './Components/Canvas/Canvas'\nimport {\n  Navbar,\n  NavbarBrand,\n  NavbarToggler,\n  Nav,\n  Dropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem\n} from 'reactstrap'\nimport ReactLoading from 'react-loading'\nimport dummySessions from './DummySessions'\nimport './App.css';\n\nfunction App() {\n\n  const [state, setState] = React.useState({\n    sessions: [],\n    isFetching: true,\n    navbarIsOpen: false,\n    dropDownIsOpen: false\n  })\n\n  React.useEffect(_ => {\n    setTimeout(_ => {\n      setState({ ...state, sessions: dummySessions, isFetching: false })\n    }, 3000)\n  }, [])\n\n  const renderContent = _ => {\n    return (\n      <Content>\n        <Canvas session={state.sessions[0].positions}/>\n      </Content>\n    )\n  }\n\n  const renderLoadAnim = _ => {\n    return (\n      <div className=\"LoadAnimContainer\">\n        <ReactLoading type=\"spin\" color=\"#343A40\" height=\"10%\" width=\"10%\" />\n      </div>\n    )\n  }\n\n  const renderNavbar = _ => {\n    return (\n      <div className={\"NavbarRoot\"}>\n        <Navbar color=\"dark\" dark expand=\"md\">\n          <NavbarBrand>Path Visualization</NavbarBrand>\n          <NavbarToggler onClick={toggleNavbar} />\n          <Nav className={'mr-auto'} navbar>\n            <Dropdown disabled={state.isFetching} nav isOpen={state.dropDownIsOpen} toggle={toggleDropdown}>\n              <DropdownToggle nav caret>\n                Sessions\n              </DropdownToggle>\n              <DropdownMenu>\n                {\n                  state.sessions.map((session, index) => {\n                    return(\n                      <DropdownItem key={index}>{session.name}</DropdownItem>\n                    )\n                  })\n                }\n              </DropdownMenu>\n            </Dropdown>\n          </Nav>\n        </Navbar>\n      </div>\n    )\n  }\n\n  const toggleNavbar = _ => setState({ ...state, navbarIsOpen: !state.navbarIsOpen })\n  const toggleDropdown = _ => setState({...state, dropDownIsOpen: !state.dropDownIsOpen})\n\n  return (\n    <div className=\"App\">\n      {renderNavbar()}\n      {state.isFetching ? renderLoadAnim() : renderContent()}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}