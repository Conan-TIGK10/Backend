{"version":3,"sources":["Components/Canvas/Drawables/Surface.js","Components/Canvas/Drawables/Path.js","Components/Canvas/Drawables/Actor.js","Components/Canvas/Drawables/Collision.js","Components/Canvas/Canvas.js","Components/SessionView/SessionView.js","Components/Navbar/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["Surface","props","draw","ctx","time","isScaling","scalingTimeElapsed","scalingTime","scalingTimeStart","scalingRatio","scale","scalingDivider","fillStyle","color","fillRect","width","height","setWidth","newWidth","setHeight","newHeight","getCenter","_","x","Math","floor","y","isInside","xIsInside","yIsInside","startScaleDown","this","Path","strokeStyle","outOfBounds","lineWidth","scaleFactor","surface","beginPath","moveTo","startX","startY","i","positions","length","read_at","toX","toY","timeBetweenPoints","timeQuota","quotaX","quotaY","stepFactor","lineTo","stroke","setStart","setSurface","collisionColor","Triangle","position","rotation","top","cos","PI","sin","left","right","closePath","fill","Actor","lastPosIndex","nextPosIndex","transforms","quotaRotation","triangle","Collisions","data","d","Circle","newSurface","arc","Canvas","path","actor","collisions","rootRef","React","useRef","canvasRef","requestRef","animationIsRunning","animationTimeRef","start","elapsed","controller","useEffect","canvas","current","getContext","size","calculateCanvasSize","cancelAnimationFrame","rootWidth","offsetWidth","rootHeight","offsetHeight","animate","calculateTime","requestAnimationFrame","timeInMs","ref","className","onClick","e","SessionView","canvasController","isPlaying","useState","duration","state","setState","fetchData","session","a","positionUrl","id","collisionUrl","reqConfig","headers","requestPromises","fetch","Promise","all","resolvedRequestPromises","jsonPromises","json","resolvedJsonPromises","newDuration","calculateDuration","buildPositionData","buildCollisionData","forEach","c","parentPos","find","p","positionId","newPositions","push","Jumbotron","name","Navbar","navbarIsOpen","dropDownIsOpen","dark","expand","NavbarBrand","NavbarToggler","Nav","navbar","Dropdown","disabled","dropdownIsDisabled","nav","isOpen","toggle","DropdownToggle","caret","DropdownMenu","dropdownItems","map","item","index","DropdownItem","key","onClickDropdown","App","sessions","activeSessionIndex","isFetching","fetchSessions","response","console","log","target","type","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.413604c3.chunk.js","sourcesContent":["class Surface {\n    constructor(props) {\n        this.width = props.width ? props.width: 0\n        this.height = props.height ? props.height : 0\n        this.scale = props.scale ? props.scale : 1\n        this.color = props.color ? props.color : \"black\"\n        this.scalingTime = 500\n        this.scalingDivider = 4\n        this.scalingTimeElapsed = null\n        this.scalingTimeStart = null\n        this.isScaling = false\n    }\n    \n    draw = (ctx, time) => {\n        if(this.isScaling) {\n            if(this.scalingTimeElapsed >= this.scalingTime) {\n                this.isScaling = false\n                this.scalingTimeStart = null\n                this.scalingTimeElapsed = null\n            }\n            else {\n                this.scalingTimeElapsed = time - this.scalingTimeStart\n                let scalingRatio = this.scalingTime / this.scalingTimeElapsed\n                this.scale -= this.scale/this.scalingDivider*scalingRatio\n            }\n        }\n\n        ctx.fillStyle = this.color\n        ctx.fillRect(0,0, this.width, this.height)\n    }\n\n    setWidth = newWidth => {\n        this.width = newWidth\n    }\n\n    setHeight = newHeight => {\n        this.height = newHeight\n    }\n\n    getCenter = _ => {\n        return {\n            x: Math.floor(this.width / 2),\n            y: Math.floor(this.height / 2)\n        }\n    }\n\n    isInside = (x, y) => {\n        const xIsInside = x <= this.width && x >= 0\n        const yIsInside = y <= this.height && y >= 0 \n\n        return (xIsInside && yIsInside)\n    }\n\n    startScaleDown = time => {\n        this.isScaling = true\n        this.scalingTimeStart = time\n    }\n}\n\nexport default Surface","class Path {\n    constructor(props) {\n        this.color = props.color ? props.color : 'black'\n        this.collisionColor = props.collisionColor ? props.collisionColor : 'red'\n        this.startX = props.startX ? props.startX: 0\n        this.startY = props.startY ? props.startY: 0\n        this.positions = props.positions\n        this.scaleFactor = props.scaleFactor\n        this.stepFactor = props.stepFactor\n    }\n\n\n    draw = (ctx, time) => {\n        ctx.strokeStyle = this.color\n\n        let outOfBounds = false\n        ctx.lineWidth = this.scaleFactor * this.surface.scale\n        ctx.beginPath()\n        ctx.moveTo(this.startX, this.startY)\n        \n        for(let i=0; i<this.positions.length-1; i++) {\n            if(this.positions[i].read_at > time){\n                break;\n            }\n\n            let toX = this.startX \n            let toY = this.startY\n\n            // MAKE IT BUTTER SMOOTH\n            if(this.positions[i+1].read_at > time){\n                let timeBetweenPoints = this.positions[i+1].read_at-this.positions[i].read_at\n                let timeElapsedBetweenPoints = time - this.positions[i].read_at\n                let timeQuota = timeElapsedBetweenPoints / timeBetweenPoints\n\n                let deltaX = this.positions[i+1].x - this.positions[i].x\n                let deltaY = this.positions[i+1].y - this.positions[i].y\n\n                let quotaX = deltaX * timeQuota\n                let quotaY = deltaY * timeQuota\n\n                toX += (this.positions[i].x + quotaX) * this.stepFactor * this.surface.scale\n                toY += (this.positions[i].y + quotaY) * this.stepFactor * this.surface.scale\n            } else {\n                toX += this.positions[i+1].x*this.stepFactor * this.surface.scale\n                toY += this.positions[i+1].y*this.stepFactor * this.surface.scale\n            }   \n              \n            // TRACK IF INSIDE\n            \n            if(!this.surface.isInside(toX, toY)) {\n                this.surface.scale = Math.floor(this.surface.scale - this.surface.scale/4)\n                outOfBounds = true\n                break\n            }\n            \n            // DRAW\n            ctx.lineTo(toX, toY)\n            ctx.stroke()\n        }\n\n        // ACT IF OUTSIDE CANVAS\n        if(outOfBounds){\n            this.surface.draw(ctx)\n            this.draw(ctx, time)\n        }\n    }\n\n    setStart = (x, y) => {\n        this.startX = x\n        this.startY = y\n    }\n\n    setSurface = surface => {\n        this.surface = surface\n    }\n}\n\nexport default Path","class Actor {\n    constructor(props) {\n        this.transforms = props.transforms\n        this.color = props.color\n        this.startX = props.startX ? props.startX: 0\n        this.startY = props.startY ? props.startY: 0\n        this.triangle = new Triangle({rotation: 0})\n        this.scaleFactor = props.scaleFactor\n        this.stepFactor = props.stepFactor\n    }\n\n    draw = (ctx, time) => {\n        let lastPosIndex = null;\n        let nextPosIndex = null;\n        let toX = this.startX\n        let toY = this.startY\n        for (let i = 0; i < this.transforms.length - 1; i++) {\n            \n            if(i === this.transforms.length - 1 || time === 0) {\n                lastPosIndex = i\n                nextPosIndex = i\n                break\n            }\n            if (this.transforms[i+1].read_at > time) {\n                lastPosIndex = i\n                nextPosIndex = i + 1\n                break\n            }\n        }\n\n        let timeBetweenPoints = this.transforms[nextPosIndex].read_at - this.transforms[lastPosIndex].read_at\n        let timeElapsedBetweenPoints = time - this.transforms[lastPosIndex].read_at\n        let timeQuota = timeElapsedBetweenPoints / timeBetweenPoints\n\n        let deltaX = this.transforms[nextPosIndex].x - this.transforms[lastPosIndex].x\n        let deltaY = this.transforms[nextPosIndex].y - this.transforms[lastPosIndex].y\n\n        let quotaX = deltaX * timeQuota\n        let quotaY = deltaY * timeQuota\n\n        toX += (this.transforms[lastPosIndex].x + quotaX) * this.stepFactor * this.surface.scale\n        toY += (this.transforms[lastPosIndex].y + quotaY) * this.stepFactor * this.surface.scale\n\n        let deltaRotation = this.transforms[nextPosIndex].rotation - this.transforms[lastPosIndex].rotation\n        let quotaRotation = deltaRotation * timeQuota\n        let rotation = this.transforms[lastPosIndex].rotation + quotaRotation\n\n        this.triangle.draw(ctx, {x: toX, y: toY}, this.scaleFactor*this.surface.scale, rotation +90)\n\n    }\n\n    setStart = (x, y) => {\n        this.startX = x\n        this.startY = y\n    }\n\n    setSurface = surface => {\n        this.surface = surface\n    }\n}\n\nclass Triangle {\n\n    draw = (ctx, position, scale, rotation) => {\n        this.scale = scale\n        this.rotation = rotation\n        let top = {\n            x: position.x + Math.cos((90-this.rotation)*Math.PI/180)*this.scale,\n            y: position.y + (-Math.sin((90-this.rotation)*Math.PI/180)*this.scale)\n        }\n\n        let left = {\n            x: position.x + Math.cos((-this.rotation)*Math.PI/180)*this.scale/2,\n            y: position.y + (-Math.sin((-this.rotation)*Math.PI/180)*this.scale/2)\n        }\n\n        let right = {\n            x: position.x + Math.cos((180-this.rotation)*Math.PI/180)*this.scale/2,\n            y: position.y + (-Math.sin((180-this.rotation)*Math.PI/180)*this.scale/2)\n        }\n\n        ctx.beginPath()\n        ctx.moveTo(top.x, top.y)\n        ctx.lineTo(left.x, left.y)\n        ctx.lineTo(right.x, right.y)\n        ctx.closePath()\n        ctx.strokeStyle = 'green'\n        ctx.stroke()\n        ctx.fillStyle = 'green'\n        ctx.fill()\n\n    }\n}\n\nexport default Actor","class Collisions {\n    constructor(props) {\n        this.data = props.data\n        this.color = props.color\n        this.startX = props.startX ? props.startX: 0\n        this.startY = props.startY ? props.startY: 0\n        this.stepFactor = props.stepFactor\n        this.scaleFactor = props.scaleFactor\n    }\n\n    draw = (ctx, time) => {\n        for(let d of this.data) {\n            if(d.read_at <= time) {\n                let x = (d.x*this.surface.scale * this.scaleFactor) + this.startX\n                let y = (d.y*this.surface.scale * this.scaleFactor) + this.startY\n                Circle.draw(ctx, this.surface.scale*this.scaleFactor, x, y, this.color)\n            } else\n                break\n        }\n    }\n\n    setSurface = (newSurface) => {\n        this.surface = newSurface\n    }\n\n    setStart = (startX, startY) => {\n        this.startX = startX\n        this.startY = startY\n    }\n}\n\nexport default Collisions\n\nclass Circle {\n    static draw(ctx, scale, x, y, color) {\n        ctx.fillStyle = color\n        ctx.strokeStyle = color\n        ctx.beginPath()\n        ctx.arc(x, y, scale, 0, 2*Math.PI)\n        ctx.stroke()\n        ctx.fill()\n    }\n}","import React from 'react'\nimport Surface from './Drawables/Surface'\nimport './Canvas.css'\nimport Path from './Drawables/Path'\nimport Actor from './Drawables/Actor'\nimport Collisions from './Drawables/Collision'\n\nconst Canvas = props => {\n\n    const surface = new Surface({\n        color: '#343A40',\n        scale: 100\n    })\n\n    const path = new Path({\n        color: 'white',\n        positions: props.positions,\n        scaleFactor: 0.3,\n        stepFactor: 0.3\n    })\n\n    const actor = new Actor({\n        color: 'green',\n        transforms: props.positions,\n        scaleFactor: 0.3,\n        stepFactor: 0.3\n    })\n\n    const collisions = new Collisions({\n        color: 'red',\n        data: props.collisions,\n        scaleFactor: 0.2,\n        stepFactor: 0.3\n    })\n\n    const rootRef = React.useRef(null)\n    const canvasRef = React.useRef(null)\n    const ctx = React.useRef(null)\n    const requestRef = React.useRef(null)\n    const animationIsRunning = React.useRef(false)\n    const animationTimeRef = React.useRef({\n        start: null,\n        elapsed: props.controller.time ? props.controller.time : 0,\n    })\n\n    React.useEffect(() => {\n        const canvas = canvasRef.current\n        ctx.current = canvas.getContext('2d')\n        const size = calculateCanvasSize()\n        ctx.current.canvas.width = size\n        ctx.current.canvas.height = size\n        surface.setWidth(size)\n        surface.setHeight(size)\n        path.setStart(surface.getCenter().x, surface.getCenter().y)\n        path.setSurface(surface)\n        actor.setStart(surface.getCenter().x, surface.getCenter().y)\n        actor.setSurface(surface)\n        collisions.setStart(surface.getCenter().x, surface.getCenter().y)\n        collisions.setSurface(surface)\n        surface.draw(ctx.current)\n        return () => cancelAnimationFrame(requestRef.current)\n    })\n\n    const calculateCanvasSize = _ => {\n        const rootWidth = rootRef.current.offsetWidth\n        const rootHeight = rootRef.current.offsetHeight\n        const size = rootWidth < rootHeight ? rootWidth : rootHeight\n        const oddSize = size % 2 == 0 ? size - 23 : size - 24\n\n        return oddSize\n    }\n\n    const toggleAnimation = e => {\n        if (animationIsRunning.current) {\n            animationTimeRef.current = {\n                start: null,\n                elapsed: null\n            }\n            surface.draw(ctx.current)\n            cancelAnimationFrame(requestRef.current)\n        } else {\n            requestAnimationFrame(animate)\n        }\n        animationIsRunning.current = !animationIsRunning.current\n    }\n\n    const animate = time => {\n        calculateTime(time)\n        surface.draw(ctx.current, animationTimeRef.current.elapsed)\n        path.draw(ctx.current, animationTimeRef.current.elapsed)\n        collisions.draw(ctx.current, animationTimeRef.current.elapsed)\n        actor.draw(ctx.current, animationTimeRef.current.elapsed)\n        requestRef.current = requestAnimationFrame(animate)\n    }\n\n    const calculateTime = timeInMs => {\n        if(animationTimeRef.current.start === null) {\n            animationTimeRef.current.start = timeInMs\n            animationTimeRef.current.elapsed = 0\n        } else {\n            animationTimeRef.current.elapsed = timeInMs - animationTimeRef.current.start\n        }\n        props.controller.time = animationTimeRef.current.elapsed\n    }\n\n    return (\n        <div ref={rootRef} className=\"CanvasRoot\">\n            <canvas\n                className=\"Canvas\"\n                ref={canvasRef}\n                onClick={toggleAnimation}\n            />\n        </div>\n    )\n}\n\nexport default Canvas","import React from 'react'\nimport './SessionView.css'\n\nimport Canvas from '../Canvas/Canvas'\nimport { Jumbotron, Button} from 'reactstrap'\n\nconst SessionView = props => {\n\n    const canvasController = React.useRef({\n        isPlaying: false,\n        time: 0\n    })\n\n    const [state, setState] = React.useState({\n        positions: [],\n        collisions: [],\n        duration: null\n    })\n\n    React.useEffect(_ => {\n        fetchData()\n    }, [props.session])\n\n    const fetchData = async _ => {\n        const positionUrl = 'http://3.122.218.59/api/position/' + props.session.id\n        const collisionUrl = 'http://3.122.218.59/api/collision/' + props.session.id\n\n        const reqConfig = {\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }\n\n        const requestPromises = [\n            fetch(positionUrl, reqConfig),\n            fetch(collisionUrl, reqConfig)\n        ]\n\n        const resolvedRequestPromises = await Promise.all(requestPromises)\n\n        const jsonPromises = [\n            resolvedRequestPromises[0].json(),\n            resolvedRequestPromises[1].json()\n        ]\n\n        const resolvedJsonPromises = await Promise.all(jsonPromises)\n\n        const newDuration = calculateDuration(resolvedJsonPromises[0])\n        const positions = buildPositionData(resolvedJsonPromises[0])\n        const collisions = buildCollisionData(positions, resolvedJsonPromises[1])\n\n        setState({...state, positions: positions, collisions: collisions, duration: newDuration})\n    }\n\n    const calculateDuration = positions => {\n        return (positions[positions.length-1].read_at - positions[0].read_at)/1000 \n    }\n\n    const buildCollisionData = (positions, collisions) => {\n        collisions.forEach(c => {\n            const parentPos = positions.find(p => p.id === c.positionId)\n            if(parentPos) {\n                c.x = parentPos.x\n                c.y = parentPos.y\n                c.read_at = parentPos.read_at\n            }\n        });\n\n        return collisions\n    }\n\n    const buildPositionData = (positions) => {\n        let newPositions = []\n        for(let i=0; i<positions.length; i++) {\n            if(i === 0) {\n                newPositions.push({\n                    id: positions[0].id,\n                    read_at: 0,\n                    x: 0,\n                    y: 0,\n                    rotation: positions[0].rotation\n                })\n            } else {\n                newPositions.push({\n                    id: positions[i].id,\n                    read_at: positions[i].read_at - positions[0].read_at,\n                    x: (positions[i].x - positions[0].x)*0.05,\n                    y: (positions[i].y - positions[0].y)*0.05,\n                    rotation: positions[i].rotation\n                })\n            }\n        }\n        return newPositions\n    }\n\n    return (\n        <div className=\"SessionViewRoot\">\n            <div className=\"SessionInfo\">\n                <Jumbotron>\n                    <h1 className=\"display-3\">{props.session.name}</h1>\n                    <hr className=\"my-2\"></hr>\n                    <p className=\"SessionSmallInfo\">Positions: <strong>{state.positions.length}</strong></p>\n                    <p className=\"SessionSmallInfo\">Collisions: <strong>{state.collisions.length}</strong></p>\n                    <p className=\"SessionSmallInfo\">Duration: <strong>{`${state.duration}s`}</strong></p>\n                </Jumbotron>\n            </div>\n            <div className=\"SessionVisualisation\">\n                <Canvas positions={state.positions} collisions={state.collisions} controller={canvasController.current}/>\n            </div>\n        </div>\n    )\n}\n\nexport default SessionView","import React from 'react'\nimport {\n    Navbar as NavBar,\n    NavbarBrand,\n    NavbarToggler,\n    Nav,\n    Dropdown,\n    DropdownToggle,\n    DropdownMenu,\n    DropdownItem\n} from 'reactstrap'\nimport './Navbar.css'\n\nconst Navbar = props => {\n\n    const [state, setState] = React.useState({\n        navbarIsOpen: false,\n        dropDownIsOpen: false\n    })\n\n    const toggleNavbar = _ => setState({ ...state, navbarIsOpen: !state.navbarIsOpen })\n    const toggleDropdown = _ => setState({ ...state, dropDownIsOpen: !state.dropDownIsOpen })\n\n    return (\n        <div className=\"NavbarRoot\">\n            <NavBar color=\"dark\" dark expand=\"md\">\n                <NavbarBrand>Path Visualization</NavbarBrand>\n                <NavbarToggler onClick={toggleNavbar} />\n                <Nav className={'mr-auto'} navbar>\n                    <Dropdown disabled={props.dropdownIsDisabled} nav isOpen={state.dropDownIsOpen} toggle={toggleDropdown}>\n                        <DropdownToggle nav caret>\n                            Sessions\n                        </DropdownToggle>\n                        <DropdownMenu>\n                            {\n                                props.dropdownItems.map((item, index) => {\n                                    return (\n                                        <DropdownItem id={index} key={index} onClick={props.onClickDropdown}>{item.name}</DropdownItem>\n                                    )\n                                })\n                            }\n                        </DropdownMenu>\n                    </Dropdown>\n                </Nav>\n            </NavBar>\n        </div>\n    )\n}\n\nexport default Navbar","import React from 'react';\nimport SessionView from './Components/SessionView/SessionView'\n\nimport ReactLoading from 'react-loading'\nimport './App.css';\nimport Navbar from './Components/Navbar/Navbar';\n\nfunction App() {\n\n  const [state, setState] = React.useState({\n    sessions: [],\n    activeSessionIndex: 0,\n    isFetching: true,\n  })\n\n  React.useEffect(_ => {\n    fetchSessions()\n  }, [])\n\n  const fetchSessions = async _ => {\n    const url = 'http://3.122.218.59/api/session'\n    const reqConfig = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }\n\n    try {\n\n      const response = await fetch(url, reqConfig)\n      const data = await response.json()\n      setState({...state, sessions: data, isFetching: false })\n    \n    } catch(e) {\n      console.log(e)\n    }\n  }\n\n  const renderSessionView = _ => {\n    return (\n      <SessionView session={state.sessions[state.activeSessionIndex]}/>\n    )\n  }\n\n  const renderLoadAnim = _ => {\n    return (\n      <div className=\"LoadAnimContainer\">\n        <ReactLoading type=\"spin\" color=\"#343A40\" height=\"10%\" width=\"10%\" />\n      </div>\n    )\n  }\n\n  const onClickDropdown = e => {\n    setState({...state, activeSessionIndex: e.target.id})\n  }\n\n  return (\n    <div className=\"App\">\n      <Navbar dropdownIsDisabled={state.isFetching} dropdownItems={state.sessions} onClickDropdown={onClickDropdown}></Navbar>\n      {state.isFetching ? renderLoadAnim() : renderSessionView()}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}