{"version":3,"sources":["Components/Canvas/Drawables/Surface.js","Components/Canvas/Drawables/Path.js","Components/Canvas/Drawables/Actor.js","Components/Canvas/Canvas.js","Components/SessionView/SessionView.js","Components/Navbar/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["Surface","props","draw","ctx","time","isScaling","scalingTimeElapsed","scalingTime","scalingTimeStart","scalingRatio","scale","scalingDivider","fillStyle","color","fillRect","width","height","setWidth","newWidth","setHeight","newHeight","getCenter","_","x","Math","floor","y","isInside","top","left","right","bottom","topIsInside","leftIsInside","bottomIsInside","rightIsInside","startScaleDown","this","Path","strokeStyle","outOfBounds","lineWidth","surface","beginPath","moveTo","startX","startY","i","positions","length","read_at","toX","toY","timeBetweenPoints","timeQuota","quotaX","quotaY","halfSide","lineTo","stroke","setStart","setSurface","collisionColor","Triangle","position","rotation","cos","PI","sin","closePath","fill","Actor","lastPosIndex","nextPosIndex","transforms","triangle","Canvas","path","actor","rootRef","React","useRef","canvasRef","requestRef","animationIsRunning","animationTimeRef","start","elapsed","controller","useEffect","canvas","current","getContext","size","calculateCanvasSize","cancelAnimationFrame","rootWidth","offsetWidth","rootHeight","offsetHeight","animate","calculateTime","requestAnimationFrame","timeInMs","ref","className","onClick","e","isPlaying","SessionView","useState","collisions","duration","test","state","setState","fetchData","a","positionUrl","session","id","collisionUrl","reqConfig","headers","requestPromises","fetch","Promise","all","resolvedRequestPromises","jsonPromises","json","resolvedJsonPromises","newDuration","calculateDuration","Jumbotron","name","Navbar","navbarIsOpen","dropDownIsOpen","dark","expand","NavbarBrand","NavbarToggler","Nav","navbar","Dropdown","disabled","dropdownIsDisabled","nav","isOpen","toggle","DropdownToggle","caret","DropdownMenu","dropdownItems","map","item","index","DropdownItem","key","onClickDropdown","App","sessions","activeSessionIndex","isFetching","fetchSessions","response","data","console","log","target","type","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c5c83126.chunk.js","sourcesContent":["class Surface {\n    constructor(props) {\n        this.width = props.width ? props.width: 0\n        this.height = props.height ? props.height : 0\n        this.scale = props.scale ? props.scale : 1\n        this.color = props.color ? props.color : \"black\"\n        this.scalingTime = 500\n        this.scalingDivider = 4\n        this.scalingTimeElapsed = null\n        this.scalingTimeStart = null\n        this.isScaling = false\n    }\n    \n    draw = (ctx, time) => {\n        if(this.isScaling) {\n            if(this.scalingTimeElapsed >= this.scalingTime) {\n                this.isScaling = false\n                this.scalingTimeStart = null\n                this.scalingTimeElapsed = null\n            }\n            else {\n                this.scalingTimeElapsed = time - this.scalingTimeStart\n                let scalingRatio = this.scalingTime / this.scalingTimeElapsed\n                this.scale -= this.scale/this.scalingDivider*scalingRatio\n            }\n        }\n\n        ctx.fillStyle = this.color\n        ctx.fillRect(0,0, this.width, this.height)\n    }\n\n    setWidth = newWidth => {\n        this.width = newWidth\n    }\n\n    setHeight = newHeight => {\n        this.height = newHeight\n    }\n\n    getCenter = _ => {\n        return {\n            x: Math.floor(this.width / 2),\n            y: Math.floor(this.height / 2)\n        }\n    }\n\n    isInside = (top, left, right, bottom) => {\n        const topIsInside = top >= 0\n        const leftIsInside = left >= 0\n        const bottomIsInside = bottom <= this.height\n        const rightIsInside = right <= this.width\n\n        return (topIsInside && leftIsInside && bottomIsInside && rightIsInside)\n    }\n\n    startScaleDown = time => {\n        this.isScaling = true\n        this.scalingTimeStart = time\n    }\n}\n\nexport default Surface","class Path {\n    constructor(props) {\n        this.color = props.color ? props.color : 'black'\n        this.collisionColor = props.collisionColor ? props.collisionColor : 'red'\n        this.startX = props.startX ? props.startX: 0\n        this.startY = props.startY ? props.startY: 0\n        this.positions = props.positions\n    }\n\n\n    draw = (ctx, time) => {\n        ctx.strokeStyle = this.color\n\n        let outOfBounds = false\n        ctx.lineWidth = this.surface.scale / 2\n        ctx.beginPath()\n        ctx.moveTo(this.startX, this.startY)\n        \n        for(let i=0; i<this.positions.length-1; i++) {\n            if(this.positions[i].read_at > time){\n                break;\n            }\n\n            let toX = this.startX \n            let toY = this.startY\n\n            // MAKE IT BUTTER SMOOTH\n            if(this.positions[i+1].read_at > time){\n                let timeBetweenPoints = this.positions[i+1].read_at-this.positions[i].read_at\n                let timeElapsedBetweenPoints = time - this.positions[i].read_at\n                let timeQuota = timeElapsedBetweenPoints / timeBetweenPoints\n\n                let deltaX = this.positions[i+1].x - this.positions[i].x\n                let deltaY = this.positions[i+1].y - this.positions[i].y\n\n                let quotaX = deltaX * timeQuota\n                let quotaY = deltaY * timeQuota\n\n                toX += (this.positions[i].x + quotaX) * this.surface.scale\n                toY += (this.positions[i].y + quotaY) * this.surface.scale\n            } else {\n                toX += this.positions[i+1].x*this.surface.scale\n                toY += this.positions[i+1].y*this.surface.scale\n            }   \n              \n            // TRACK IF INSIDE\n            const halfSide = this.surface.scale <= 1 ? 0: Math.floor(this.surface.scale/2)\n            const left = toX - halfSide\n            const top = toY - halfSide\n            const right = toX + halfSide\n            const bottom = toY + halfSide\n\n            if(!this.surface.isInside(top, left, right, bottom)) {\n                this.surface.scale = Math.floor(this.surface.scale - this.surface.scale/4)\n                outOfBounds = true\n                break\n            }\n\n            // DRAW\n            ctx.lineTo(toX, toY)\n            ctx.stroke()\n        }\n\n        // ACT IF OUTSIDE CANVAS\n        if(outOfBounds){\n            this.surface.draw(ctx)\n            this.draw(ctx, time)\n        }\n    }\n\n    setStart = (x, y) => {\n        this.startX = x\n        this.startY = y\n    }\n\n    setSurface = surface => {\n        this.surface = surface\n    }\n}\n\nexport default Path","class Actor {\n    constructor(props) {\n        this.transforms = props.transforms\n        this.color = props.color\n        this.startX = props.startX ? props.startX: 0\n        this.startY = props.startY ? props.startY: 0\n        this.triangle = new Triangle({rotation: 0})\n    }\n\n    draw = (ctx, time) => {\n        let lastPosIndex = null;\n        let nextPosIndex = null;\n        let toX = this.startX\n        let toY = this.startY\n        for (let i = 0; i < this.transforms.length - 1; i++) {\n            \n            if(i === this.transforms.length - 1 || time === 0) {\n                lastPosIndex = i\n                nextPosIndex = i\n                break\n            }\n            if (this.transforms[i+1].read_at > time) {\n                lastPosIndex = i\n                nextPosIndex = i + 1\n                break\n            }\n        }\n\n        let timeBetweenPoints = this.transforms[nextPosIndex].read_at - this.transforms[lastPosIndex].read_at\n        let timeElapsedBetweenPoints = time - this.transforms[lastPosIndex].read_at\n        let timeQuota = timeElapsedBetweenPoints / timeBetweenPoints\n\n        let deltaX = this.transforms[nextPosIndex].x - this.transforms[lastPosIndex].x\n        let deltaY = this.transforms[nextPosIndex].y - this.transforms[lastPosIndex].y\n\n        let quotaX = deltaX * timeQuota\n        let quotaY = deltaY * timeQuota\n\n        toX += (this.transforms[lastPosIndex].x + quotaX) * this.surface.scale\n        toY += (this.transforms[lastPosIndex].y + quotaY) * this.surface.scale\n\n        //ctx.fillStyle = this.color\n        //ctx.fillRect(toX-(this.surface.scale/2), toY-(this.surface.scale/2), this.surface.scale, this.surface.scale)\n        this.triangle.draw(ctx, {x: toX, y: toY}, this.surface.scale, this.transforms[lastPosIndex].rotation)\n\n    }\n\n    setStart = (x, y) => {\n        this.startX = x\n        this.startY = y\n    }\n\n    setSurface = surface => {\n        this.surface = surface\n    }\n}\n\nclass Triangle {\n\n    draw = (ctx, position, scale, rotation) => {\n        this.scale = scale\n        this.rotation = rotation\n        let top = {\n            x: position.x + Math.cos((90-this.rotation)*Math.PI/180)*this.scale,\n            y: position.y + (-Math.sin((90-this.rotation)*Math.PI/180)*this.scale)\n        }\n\n        let left = {\n            x: position.x + Math.cos((-this.rotation)*Math.PI/180)*this.scale/2,\n            y: position.y + (-Math.sin((-this.rotation)*Math.PI/180)*this.scale/2)\n        }\n\n        let right = {\n            x: position.x + Math.cos((180-this.rotation)*Math.PI/180)*this.scale/2,\n            y: position.y + (-Math.sin((180-this.rotation)*Math.PI/180)*this.scale/2)\n        }\n\n        ctx.beginPath()\n        ctx.moveTo(top.x, top.y)\n        ctx.lineTo(left.x, left.y)\n        ctx.lineTo(right.x, right.y)\n        ctx.closePath()\n        ctx.strokeStyle = 'green'\n        ctx.stroke()\n        ctx.fillStyle = 'green'\n        ctx.fill()\n\n    }\n}\n\nexport default Actor","import React from 'react'\nimport Surface from './Drawables/Surface'\nimport './Canvas.css'\nimport Path from './Drawables/Path'\nimport Actor from './Drawables/Actor'\n\nconst Canvas = props => {\n\n    const surface = new Surface({\n        color: '#343A40',\n        scale: 100\n    })\n\n    const path = new Path({\n        color: 'white',\n        positions: props.positions,\n    })\n\n    const actor = new Actor({\n        color: 'green',\n        transforms: props.positions\n    })\n\n    const rootRef = React.useRef(null)\n    const canvasRef = React.useRef(null)\n    const ctx = React.useRef(null)\n    const requestRef = React.useRef(null)\n    const animationIsRunning = React.useRef(false)\n    const animationTimeRef = React.useRef({\n        start: null,\n        elapsed: props.controller.time ? props.controller.time : 0\n    })\n\n    React.useEffect(() => {\n        const canvas = canvasRef.current\n        ctx.current = canvas.getContext('2d')\n        const size = calculateCanvasSize()\n        ctx.current.canvas.width = size\n        ctx.current.canvas.height = size\n        surface.setWidth(size)\n        surface.setHeight(size)\n        path.setStart(surface.getCenter().x, surface.getCenter().y)\n        path.setSurface(surface)\n        actor.setStart(surface.getCenter().x, surface.getCenter().y)\n        actor.setSurface(surface)\n        surface.draw(ctx.current)\n        return () => cancelAnimationFrame(requestRef.current)\n    })\n\n    const calculateCanvasSize = _ => {\n        const rootWidth = rootRef.current.offsetWidth\n        const rootHeight = rootRef.current.offsetHeight\n        const size = rootWidth < rootHeight ? rootWidth : rootHeight\n        const oddSize = size % 2 == 0 ? size - 23 : size - 24\n\n        return oddSize\n    }\n\n    const toggleAnimation = e => {\n        if (animationIsRunning.current) {\n            animationTimeRef.current = {\n                start: null,\n                elapsed: null\n            }\n            surface.draw(ctx.current)\n            cancelAnimationFrame(requestRef.current)\n        } else {\n            props.controller.isPlaying = true\n            requestAnimationFrame(animate)\n        }\n        animationIsRunning.current = !animationIsRunning.current\n    }\n\n    const animate = time => {\n        calculateTime(time)\n        surface.draw(ctx.current, animationTimeRef.current.elapsed)\n        path.draw(ctx.current, animationTimeRef.current.elapsed)\n        actor.draw(ctx.current, animationTimeRef.current.elapsed)\n        requestRef.current = requestAnimationFrame(animate)\n    }\n\n    const calculateTime = timeInMs => {\n        if(animationTimeRef.current.start === null) {\n            animationTimeRef.current.start = timeInMs\n            animationTimeRef.current.elapsed = 0\n        } else {\n            animationTimeRef.current.elapsed = timeInMs - animationTimeRef.current.start\n        }\n        props.controller.time = animationTimeRef.current.elapsed\n    }\n\n    return (\n        <div ref={rootRef} className=\"CanvasRoot\">\n            <canvas\n                className=\"Canvas\"\n                ref={canvasRef}\n                onClick={toggleAnimation}\n            />\n        </div>\n    )\n}\n\nexport default Canvas","import React from 'react'\nimport './SessionView.css'\n\nimport Canvas from '../Canvas/Canvas'\nimport { Jumbotron} from 'reactstrap'\n\nconst SessionView = props => {\n\n    let canvasController = {\n        isPlaying: false,\n        time: 0\n    }\n\n    const [state, setState] = React.useState({\n        positions: [],\n        collisions: [],\n        duration: null,\n        test: 0\n    })\n\n    React.useEffect(_ => {\n        fetchData()\n    }, [])\n\n    const fetchData = async _ => {\n        const positionUrl = 'http://3.122.218.59/api/position/' + props.session.id\n        const collisionUrl = 'http://3.122.218.59/api/collision/' + props.session.id\n\n        const reqConfig = {\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }\n\n        const requestPromises = [\n            fetch(positionUrl, reqConfig),\n            fetch(collisionUrl, reqConfig)\n        ]\n\n        const resolvedRequestPromises = await Promise.all(requestPromises)\n\n        const jsonPromises = [\n            resolvedRequestPromises[0].json(),\n            resolvedRequestPromises[1].json()\n        ]\n\n        const resolvedJsonPromises = await Promise.all(jsonPromises)\n\n        const newDuration = calculateDuration(resolvedJsonPromises[0])\n\n        setState({...state, positions: resolvedJsonPromises[0], collisions: resolvedJsonPromises[1], duration: newDuration})\n    }\n\n    const calculateDuration = positions => {\n        return (positions[positions.length-1].read_at - positions[0].read_at)/1000 \n    }\n\n    return (\n        <div className=\"SessionViewRoot\">\n            <div className=\"SessionInfo\">\n                <Jumbotron>\n                    <h1 className=\"display-3\">{props.session.name}</h1>\n                    <hr className=\"my-2\"></hr>\n                    <p className=\"SessionSmallInfo\">Positions: <strong>{state.positions.length}</strong></p>\n                    <p className=\"SessionSmallInfo\">Collisions: <strong>{state.collisions.length}</strong></p>\n                    <p className=\"SessionSmallInfo\">Duration: <strong>{`${state.duration}s`}</strong></p>\n                </Jumbotron>\n            </div>\n            <div className=\"SessionVisualisation\">\n                <Canvas positions={state.positions} controller={canvasController}/>\n            </div>\n        </div>\n    )\n}\n\nexport default SessionView","import React from 'react'\nimport {\n    Navbar as NavBar,\n    NavbarBrand,\n    NavbarToggler,\n    Nav,\n    Dropdown,\n    DropdownToggle,\n    DropdownMenu,\n    DropdownItem\n} from 'reactstrap'\nimport './Navbar.css'\n\nconst Navbar = props => {\n\n    const [state, setState] = React.useState({\n        navbarIsOpen: false,\n        dropDownIsOpen: false\n    })\n\n    const toggleNavbar = _ => setState({ ...state, navbarIsOpen: !state.navbarIsOpen })\n    const toggleDropdown = _ => setState({ ...state, dropDownIsOpen: !state.dropDownIsOpen })\n\n    return (\n        <div className=\"NavbarRoot\">\n            <NavBar color=\"dark\" dark expand=\"md\">\n                <NavbarBrand>Path Visualization</NavbarBrand>\n                <NavbarToggler onClick={toggleNavbar} />\n                <Nav className={'mr-auto'} navbar>\n                    <Dropdown disabled={props.dropdownIsDisabled} nav isOpen={state.dropDownIsOpen} toggle={toggleDropdown}>\n                        <DropdownToggle nav caret>\n                            Sessions\n                        </DropdownToggle>\n                        <DropdownMenu>\n                            {\n                                props.dropdownItems.map((item, index) => {\n                                    return (\n                                        <DropdownItem id={index} key={index} onClick={props.onClickDropdown}>{item.name}</DropdownItem>\n                                    )\n                                })\n                            }\n                        </DropdownMenu>\n                    </Dropdown>\n                </Nav>\n            </NavBar>\n        </div>\n    )\n}\n\nexport default Navbar","import React from 'react';\nimport SessionView from './Components/SessionView/SessionView'\n\nimport ReactLoading from 'react-loading'\nimport './App.css';\nimport Navbar from './Components/Navbar/Navbar';\n\nfunction App() {\n\n  const [state, setState] = React.useState({\n    sessions: [],\n    activeSessionIndex: 0,\n    isFetching: true,\n  })\n\n  React.useEffect(_ => {\n    fetchSessions()\n  }, [])\n\n  const fetchSessions = async _ => {\n    const url = 'http://3.122.218.59/api/session'\n    const reqConfig = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }\n\n    try {\n\n      const response = await fetch(url, reqConfig)\n      const data = await response.json()\n      setState({...state, sessions: data, isFetching: false })\n    \n    } catch(e) {\n      console.log(e)\n    }\n  }\n\n  const renderSessionView = _ => {\n    return (\n      <SessionView session={state.sessions[state.activeSessionIndex]}/>\n    )\n  }\n\n  const renderLoadAnim = _ => {\n    return (\n      <div className=\"LoadAnimContainer\">\n        <ReactLoading type=\"spin\" color=\"#343A40\" height=\"10%\" width=\"10%\" />\n      </div>\n    )\n  }\n\n  const onClickDropdown = e => {\n    setState({...state, activeSessionIndex: e.target.id})\n  }\n\n  return (\n    <div className=\"App\">\n      <Navbar dropdownIsDisabled={state.isFetching} dropdownItems={state.sessions} onClickDropdown={onClickDropdown}></Navbar>\n      {state.isFetching ? renderLoadAnim() : renderSessionView()}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}